<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jan Sanchez]]></title>
  <link href="http://jansanchez.com/atom.xml" rel="self"/>
  <link href="http://jansanchez.com/"/>
  <updated>2013-01-23T17:27:00-05:00</updated>
  <id>http://jansanchez.com/</id>
  <author>
    <name><![CDATA[Jan Sanchez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[State of iOS XML Libraries in 2013]]></title>
    <link href="http://jansanchez.com/blog/2013/01/22/state-of-ios-xml-libraries-in-2013/"/>
    <updated>2013-01-22T19:41:00-05:00</updated>
    <id>http://jansanchez.com/blog/2013/01/22/state-of-ios-xml-libraries-in-2013</id>
    <content type="html"><![CDATA[<p>When it comes to XML parsing in iOS, developers usually first stumble upon NSXMLParser. NSXMLParser is a <a href="http://en.wikipedia.org/wiki/Simple_API_for_XML">SAX</a> Parser included on the iOS SDK. While it works fine, developers usually end up writing tons of lines to parse XML documents.</p>

<p>There are better and faster alternatives to work with. I personally enjoy working with <a href="https://github.com/ZaBlanc/RaptureXML">RaptureXML</a>. There are different factors when deciding which XML libary to choose. Often, the most common is speed.</p>

<p>Currently, there is no much data on speed tests. The usual source for this data is this dated (March 2010) <a href="http://www.raywenderlich.com/553/how-to-chose-the-best-xml-parser-for-your-iphone-project">excellent blog post</a>. On it, the author checks various libraries and performs tests based on <a href="http://developer.apple.com/library/ios/#samplecode/XMLPerformance/Introduction/Intro.html#//apple_ref/doc/uid/DTS40008094-Intro-DontLinkElementID_2">Apple&#8217;s source</a>.</p>

<p>Since then, several of these libraries have been updated and some new libraries have become available as well. Not to say, that we have now multi-core devices such as the iPhone 5. Therefore, I updated the source code to include the latest versions of the XML libraries and included a few more.</p>

<h4>Libraries tested</h4>

<ul>
<li>NSXMLParser</li>
<li>libxml2</li>
<li><a href="https://github.com/71squared/TBXML">TBXML</a></li>
<li><a href="https://github.com/TouchCode/TouchXML">TouchXML</a></li>
<li><a href="https://github.com/robbiehanson/KissXML">KissXML</a></li>
<li><a href="https://code.google.com/p/gdata-objectivec-client/">GDataXML</a></li>
<li><a href="https://github.com/ZaBlanc/RaptureXML">RaptureXML</a></li>
<li><a href="http://sourceforge.net/projects/tinyxml/">TinyXML</a></li>
<li><a href="https://github.com/leethomason/tinyxml2">TinyXML2</a></li>
</ul>


<p>All the tests were performed on an iPhone 5, each of them ran 10 times. Here&#8217;s a chart with the results:</p>

<p><img src="http://jansanchez.com/images/xmlBenchmarksChart.png"></p>

<p>The fastest library was TBXML and most of the libraries finished within 0.01 seconds. It was a surprise that TinyXML2 came last, taking double the time of TinyXML.</p>

<p>From this tests one can conclude, that under modern hardware, the choice of speed does not matter that much as most of the libraries perform very similarly. The choice breaks down to a matter of preference, to which library you enjoy the most working with.</p>

<p>The code for this test can be found on <a href="https://github.com/jansanz/iOSXMLPerformance">my repo</a>. Feel free to fork it and improve any of the tests, specially if they will help making the parsing faster.</p>

<p>I am planning on revamping these benchmarks based on a <a href="https://github.com/bontoJR/iOS-JSON-Performance">similar test but for JSON Parsing</a>. It is currently a <a href="https://github.com/jansanz/iOS-XML-Performance">work in progress</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3k Reputation on StackOverflow]]></title>
    <link href="http://jansanchez.com/blog/2013/01/12/3k-reputation-on-stackoverflow/"/>
    <updated>2013-01-12T18:04:00-05:00</updated>
    <id>http://jansanchez.com/blog/2013/01/12/3k-reputation-on-stackoverflow</id>
    <content type="html"><![CDATA[<p>Finally I reached <a href="http://stackoverflow.com/users/265375/jan-s">3k Reputation</a> on <a href="http://stackoverflow.com">StackOverlow</a>.</p>

<p>Also, <a href="http://stackoverflow.com/questions/2662531/launching-google-maps-directions-via-an-intent-on-android/2663565#2663565">one of my top answers</a> got over 100 upvotes :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using UIImagePickerController]]></title>
    <link href="http://jansanchez.com/blog/2012/12/20/using-uiimagepickercontroller/"/>
    <updated>2012-12-20T16:50:00-05:00</updated>
    <id>http://jansanchez.com/blog/2012/12/20/using-uiimagepickercontroller</id>
    <content type="html"><![CDATA[<p>Have you ever found the need in your app to let the user take a Picture or choose one from the Camera Roll? Follow and find
how easy is to add this feature to your app.</p>

<p>The iOS SDK provides a native controller that handles the hard bits for you. This controller is <em><a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIImagePickerController_Class/UIImagePickerController/UIImagePickerController.html">UIImagePickerController</a></em>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIImagePickerController</span> <span class="o">*</span><span class="n">pickerController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImagePickerController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">pickerController</span><span class="p">.</span><span class="n">sourceType</span> <span class="o">=</span> <span class="n">UIImagePickerControllerSourceTypeCamera</span><span class="p">;</span>
</span><span class='line'><span class="n">pickerController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">imagePickerController</span>
</span><span class='line'>                   <span class="nl">animated:</span><span class="n">YES</span>
</span><span class='line'>                 <span class="nl">completion:</span><span class="nb">NULL</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this particular example it will bring the camera. There are other options as well.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// This will bring the Camera</span>
</span><span class='line'><span class="n">pickerController</span><span class="p">.</span><span class="n">sourceType</span> <span class="o">=</span> <span class="n">UIImagePickerControllerSourceTypeCamera</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Option for showing the photo library</span>
</span><span class='line'><span class="n">pickerController</span><span class="p">.</span><span class="n">sourceType</span> <span class="o">=</span> <span class="n">UIImagePickerControllerSourceTypePhotoLibrary</span><span class="p">;</span>
</span><span class='line'><span class="c1">// This will just show the photos / videos view</span>
</span><span class='line'><span class="n">pickerController</span><span class="p">.</span><span class="n">sourceType</span> <span class="o">=</span> <span class="n">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the last two options require users to allow the app to access their photos / videos.</p>

<p>Don&#8217;t forget to check if the source type is available:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">UIImagePickerController</span> <span class="nl">isSourceTypeAvailable:</span><span class="n">UIImagePickerControllerSourceTypeCamera</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Set sourceType to UIImagePickerControllerSourceTypeCamera</span>
</span><span class='line'>  <span class="c1">// and present controller</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you do not care about movies, just still images we can set the media typpe to <em><a href="http://developer.apple.com/library/ios/#documentation/MobileCoreServices/Reference/UTTypeRef/Reference/reference.html#//apple_ref/c/data/kUTTypeImage">kUTTypeImage</a></em>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;MobileCoreServices/MobileCoreServices.h&gt;</span>
</span><span class='line'><span class="c1">// Don&#39;t forget to add MobileCoreServices.framework to the project</span>
</span><span class='line'><span class="n">pickerController</span><span class="p">.</span><span class="n">mediaTypes</span> <span class="o">=</span> <span class="err">@</span><span class="p">[(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kUTTypeImage</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class also supports the ability to let users crop and scale pictures. This is very useful if want to get square pics, for instance to update a social profile picture.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">pickerController</span><span class="p">.</span><span class="n">allowsEditing</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get the actual image that users picked we implement one of <em><a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIImagePickerControllerDelegate_Protocol/UIImagePickerControllerDelegate/UIImagePickerControllerDelegate.html">UIImagePickerControllerDelegate</a></em> methods.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">imagePickerController:</span><span class="p">(</span><span class="n">UIImagePickerController</span> <span class="o">*</span><span class="p">)</span><span class="nv">picker</span>
</span><span class='line'><span class="nf">didFinishPickingMediaWithInfo:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">info</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// UIImagePickerControllerEditedImage is useful if you allowed</span>
</span><span class='line'>  <span class="c1">// editing of images</span>
</span><span class='line'>  <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">info</span> <span class="nl">objectForKey:</span><span class="n">UIImagePickerControllerEditedImage</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">info</span> <span class="nl">objectForKey:</span><span class="n">UIImagePickerControllerOriginalImage</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Do something with the image</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, <em>UIImagePickerController</em> is quite easy to implement and it has lots of options that you can make use of.
It also allows you to set a custom overlay and define your own camera buttons.</p>

<p>This sample code can be found in my <a href="https://github.com/jansanz/UIImagePickerController-Demo">GitHub repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple GeoJSON Viewer]]></title>
    <link href="http://jansanchez.com/blog/2012/12/15/simple-geojson-viewer/"/>
    <updated>2012-12-15T00:18:00-05:00</updated>
    <id>http://jansanchez.com/blog/2012/12/15/simple-geojson-viewer</id>
    <content type="html"><![CDATA[<p>In order to visualize GeoJSON polygons for Apple Maps I built a simple GeoJSON Viewer. I built it since
there wasn&#8217;t anything similar. It uses Google Maps.</p>

<p>Right now, it covers the GeoJSON features that Apple supports for their Maps. Perhaps, in the future I will include full support for GeoJSON.</p>

<p>Check the <a href="http://jansanchez.com/geojson-viewer">demo</a> or <a href="https://github.com/jansanz/geojson-viewer">fork it</a>.</p>
]]></content>
  </entry>
  
</feed>
